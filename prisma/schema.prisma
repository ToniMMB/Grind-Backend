generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String?
  avatar        String?
  
  // Gamificaci√≥n
  level         Int       @default(1)
  xp            Int       @default(0)
  currentStreak Int       @default(0)
  longestStreak Int       @default(0)
  lastActiveDate DateTime?
  
  // Objetivos
  dailyGoalMinutes Int    @default(300)
  
  // Relaciones
  settings      UserSettings?
  focusBlocks   FocusBlock[]
  focusSessions FocusSession[]
  tasks         Task[]
  statistics    DailyStatistic[]
  insights      AIInsight[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserSettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  pushEnabled       Boolean  @default(true)
  hapticEnabled     Boolean  @default(true)
  soundEnabled      Boolean  @default(true)
  darkMode          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum BlockType {
  PREDEFINED
  CUSTOM
}

model FocusBlock {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name          String
  description   String?
  type          BlockType  @default(CUSTOM)
  icon          String?
  color         String?
  
  startTime     String
  endTime       String
  daysOfWeek    Int[]
  
  isActive      Boolean    @default(true)
  
  sessions      FocusSession[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  @@index([userId])
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

model FocusSession {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  focusBlockId    String?
  focusBlock      FocusBlock?   @relation(fields: [focusBlockId], references: [id], onDelete: SetNull)
  
  name            String
  status          SessionStatus @default(ACTIVE)
  
  startTime       DateTime
  endTime         DateTime?
  plannedDuration Int
  actualDuration  Int?
  
  pausedAt        DateTime?
  totalPaused     Int          @default(0)
  
  xpEarned        Int          @default(0)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@index([userId, startTime])
  @@index([status])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title         String
  description   String?
  priority      TaskPriority @default(MEDIUM)
  
  completed     Boolean      @default(false)
  completedAt   DateTime?
  
  dueDate       DateTime?
  category      String?
  order         Int          @default(0)
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([userId, completed])
}

model DailyStatistic {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date          DateTime
  
  totalMinutes  Int      @default(0)
  tasksCompleted Int     @default(0)
  sessionsCount Int      @default(0)
  xpEarned      Int      @default(0)
  
  goalReached   Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, date])
  @@index([userId, date])
}

enum InsightType {
  IMPROVEMENT_TIP
  BEST_TIME
  CONSISTENCY
  ACHIEVEMENT
  RECOMMENDATION
}

model AIInsight {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type          InsightType
  title         String
  message       String
  
  priority      Int         @default(0)
  isRead        Boolean     @default(false)
  
  validFrom     DateTime    @default(now())
  validUntil    DateTime?
  
  createdAt     DateTime    @default(now())
  
  @@index([userId, isRead])
}

